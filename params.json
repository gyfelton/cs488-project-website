{"name":"CS488 Project - Animated Battle Scene","tagline":"","body":"# Animated Battle Scene for my iPad game\r\nThis project focuses on using a ray tracer to generate a series of images to animate a battle scene for my iPad game [\"Dragon Match!\"](http://gyfelton.github.io/iPad-LearnEverything). After this change the game should be renamed to \"Pikachu Duel!\" :)\r\nAdditional objectives are also included and explained below:\r\n\r\n## Objective 1. Model the scene \r\nWith advanced primitives, such as cylinder and torus\r\n\r\n###- Cylinder and Torus\r\n\r\n![cylinder and torus](https://raw.githubusercontent.com/gyfelton/cs488-project-website/gh-pages/images/1_primitives.png)\r\n\r\n\r\n## Objective 2. Apply texture with UV Mapping technique\r\nTo achieve this, I use barycentric coordinate calculation to figure out each pixel's normal and corresponding UV coordinates based on normals and UV coordinates of its nearby vertex (the three vertex that form the mesh this point is on)\r\n\r\n###- Pikachu\r\n\r\n![unmapped](https://raw.githubusercontent.com/gyfelton/cs488-project-website/gh-pages/images/2_pikachu_unmapped.png)\r\nUnmapped Pikachu raw model\r\n\r\n\r\n![pikachu](https://raw.githubusercontent.com/gyfelton/cs488-project-website/gh-pages/images/2_pikachu.png)\r\n\r\nThe body now is rounded and texture is applied correctly after UV ampping\r\n\r\n## Objective 3. Animate the scene\r\nTotal of 242 images are rendered to achieve this. More images can be generated if more time given to generate a smoother animation.\r\n\r\nDownload the game at [\"Dragon Match!\"](http://gyfelton.github.io/iPad-LearnEverything) to experience the animation.\r\n\r\n## Objective 4. Anti-aliasing with supersampling\r\nBy shooting multiple rays to collect colour info for a pixel instead of one ray, anti-aliasing can be easily achieved.\r\n\r\n![no anti-alising](https://raw.githubusercontent.com/gyfelton/cs488-project-website/gh-pages/images/nonhier_noanti.png)\r\nno anti-alising\r\n\r\n![4x anti-alising](https://raw.githubusercontent.com/gyfelton/cs488-project-website/gh-pages/images/nonhier_4x.png)\r\n4x anti-alising\r\n\r\n![16x anti-alising](https://raw.githubusercontent.com/gyfelton/cs488-project-website/gh-pages/images/nonhier16x.png)\r\n16x anti-alising\r\n\r\n\r\n## Objective 5. Cooperate sound in the game\r\nWhen the player gains a score or loses one, it will play sound before the animation starts.\r\n\r\n## Objective 6. Photon mapping to illuminate the game character\r\nBefore ray tracing, I apply photon mapping to light up the character if the collision point is closer to one Pikachu:\r\n\r\n![no_photon_mapping_scene](https://raw.githubusercontent.com/gyfelton/cs488-project-website/gh-pages/images/6_no_photon_mapping.png)\r\n\r\nWithout Photon Mapping\r\n\r\n![with_photon_mapping_scene](https://raw.githubusercontent.com/gyfelton/cs488-project-website/gh-pages/images/6_with_photon_mapping.png)\r\n\r\nWith Photon Mapping, note the head of left Pikachu is lighten up because of the photon mapping.\r\n\r\nNote that part of the code implementation is based on the following book:\r\n\r\n[4]  H.W. Jensen, Realistic Image Synthesis Using Photon Mapping, A K Peters, Natick, Massachussets, 2001, pp. 95â€“103. \r\n\r\nThe photon mapping structure (balanced k-d tree) is used to store the photons.\r\n\r\n## Objective 7. Achieve soft shadow with the help of Photon mapping\r\nOnce enough photons are generated and apply to the scene correctly, we can immediately notice the soft shadow compared to hard shadow applied by external point light source.\r\n\r\n![low_resolution](https://raw.githubusercontent.com/gyfelton/cs488-project-website/gh-pages/images/photon_map_low.png)\r\n\r\nPhoton-mapped scene with low number of photons (around 10 thousand)\r\n\r\n![high_resolution_no_reflection](https://raw.githubusercontent.com/gyfelton/cs488-project-website/gh-pages/images/photon_map_no_reflection.png)\r\n\r\nPhoton-mapped scene with high number of photons, but no reflection (around 500 thousand)\r\n\r\n![high_resolution_with_reflection](https://raw.githubusercontent.com/gyfelton/cs488-project-website/gh-pages/images/photon_map_final_high.png)\r\n\r\nPhoton-mapped scene with high number of photons and reflection (around 500 thousand)\r\n\r\n\r\n## Objective 8: Glossy Reflection\r\nWhen a ray is about to be reflected, instead of sending one ray for the reflection colour, multiple ones are sent using a cos-weighted distribution function to collect an area of colour (e=1000). By doing this we can achieve glossy surface:\r\n\r\n![high_resolution_with_glossy_reflection](https://raw.githubusercontent.com/gyfelton/cs488-project-website/gh-pages/images/photon_map_glossy.png)\r\n\r\nPhoton-mapped scene with high number of photons and glossy reflection\r\n\r\n\r\n##Game overview\r\nThe game is now replaced with a new, dynamic battle scene as shown below. The collision point will move as the player wins or loses score\r\n\r\n![screenshot](https://raw.githubusercontent.com/gyfelton/cs488-project-website/gh-pages/images/screenshot.png)\r\n\r\nGame Screenshot","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}