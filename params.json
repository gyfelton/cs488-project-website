{"name":"CS488 Project - Animated Battle Scene","tagline":"","body":"# Animated Battle Scene for my iPad game\r\nThis project focuses on using a ray tracer to generate a series of images to animate a battle scene for my iPad game [\"Dragon Match\"](http://gyfelton.github.io/iPad-LearnEverything).\r\nAdditional objectives are also included and explained below:\r\n\r\n## Objective 1. Model the scene with a character and other primitives, such as cylinder and torus\r\n\r\n###- Pikachu\r\n\r\n###- Cylinder and Torus\r\n\r\n## Objective 2. Apply texture with UV Mapping technique\r\nTo achieve this, I use barycentric coordinate calculation to figure out each pixel's normal and corresponding UV coordinates based on normals and UV coordinates of its nearby vertex (the three vertex that form the mesh this point is on)\r\n\r\n###- Fully rendered Pikachu (Note the body is rounded and texture is applied correcly)\r\n\r\n## Objective 3. Animate the scene\r\nTotal of 242 images are rendered to achieve this. More images can be generated if more time given to generate a smoother animation.\r\n\r\n###- Game screenshot\r\n\r\n## Objective 5. Anti-aliasing with supersampling\r\nBy shooting multiple rays to collect colour info for a pixel instead of one ray, anti-aliasing can be easily achieved.\r\n\r\n## Objective 4. Cooperate sound in the game\r\nWhen the player gains a score or loses one, it will play sound before the animation starts.\r\n\r\n## Objective 6. Photon mapping to illuminate the game character\r\nBefore ray tracing, I apply photon mapping to light up the character if the collision point is closer to one Pikachu:\r\n\r\n## Objective 7. Achieve soft shadow with the help of Photon mapping\r\nOnce enough photons are generated and apply to the scene correctly, we can immediately notice the soft shadow compared to hard shadow applied by external light source\r\n\r\n## Objective 8: Glossy Reflection\r\nWhen a ray is about to be reflected, instead of sending one ray for the reflection colour, multiple ones are sent using a cos-weighted distribution function to collect an area of colour (e=1000). By doing this we can achieve glossy surface:\r\n\r\n##Game overview\r\nThe game is now replaced with a new, dynamic battle scene as shown below. The collision point will move as the player wins or loses score\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}